{"version":3,"file":"lib.umd.js","sources":["../src/utils/audio.ts","../src/utils/createWorkletModuleLoader.ts","../src/utils/rawAudioProcessor.ts","../src/utils/compatibility.ts","../src/utils/input.ts","../src/utils/audioConcatProcessor.ts","../src/utils/output.ts","../src/utils/events.ts","../src/utils/connection.ts","../src/index.ts"],"sourcesContent":["export function arrayBufferToBase64(b: ArrayBufferLike) {\n  const buffer = new Uint8Array(b);\n  // @ts-ignore\n  const base64Data = window.btoa(String.fromCharCode(...buffer));\n  return base64Data;\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n","const URLCache = new Map<string, string>();\n\nexport function createWorkletModuleLoader(name: string, sourceCode: string) {\n  return async (worklet: AudioWorklet) => {\n    const url = URLCache.get(name);\n    if (url) {\n      return worklet.addModule(url);\n    }\n\n    const blob = new Blob([sourceCode], { type: \"application/javascript\" });\n    const blobURL = URL.createObjectURL(blob);\n    try {\n      await worklet.addModule(blobURL);\n      URLCache.set(name, blobURL);\n      return;\n    } catch {\n      URL.revokeObjectURL(blobURL);\n    }\n\n    try {\n      // Attempting to start a conversation in Safari inside an iframe will\n      // throw a CORS error because the blob:// protocol is considered\n      // cross-origin. In such cases, fall back to using a base64 data URL:\n      const base64 = btoa(sourceCode);\n      const moduleURL = `data:application/javascript;base64,${base64}`;\n      await worklet.addModule(moduleURL);\n      URLCache.set(name, moduleURL);\n    } catch (error) {\n      throw new Error(\n        `Failed to load the ${name} worklet module. Make sure the browser supports AudioWorklets.`\n      );\n    }\n  };\n}\n","/*\n * ulaw encoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nimport { createWorkletModuleLoader } from \"./createWorkletModuleLoader\";\n\nexport const loadRawAudioProcessor = createWorkletModuleLoader(\n  \"raw-audio-processor\",\n  // language=JavaScript\n  `\nconst BIAS = 0x84;\nconst CLIP = 32635;\nconst encodeTable = [\n  0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\n  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\n];\n\nfunction encodeSample(sample) {\n  let sign;\n  let exponent;\n  let mantissa;\n  let muLawSample;\n  sign = (sample >> 8) & 0x80;\n  if (sign !== 0) sample = -sample;\n  sample = sample + BIAS;\n  if (sample > CLIP) sample = CLIP;\n  exponent = encodeTable[(sample>>7) & 0xFF];\n  mantissa = (sample >> (exponent+3)) & 0x0F;\n  muLawSample = ~(sign | (exponent << 4) | mantissa);\n  \n  return muLawSample;\n}\n\nclass RawAudioProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n              \n    this.port.onmessage = ({ data }) => {\n      switch (data.type) {\n        case \"setFormat\":\n          this.isMuted = false;\n          this.buffer = []; // Initialize an empty buffer\n          this.bufferSize = data.sampleRate / 4;\n          this.format = data.format;\n\n          if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\n            globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\n              this.resampler = resampler;\n            });\n          }\n          break;\n        case \"setMuted\":\n          this.isMuted = data.isMuted;\n          break;\n      }\n    };\n  }\n  process(inputs) {\n    if (!this.buffer) {\n      return true;\n    }\n    \n    const input = inputs[0]; // Get the first input node\n    if (input.length > 0) {\n      let channelData = input[0]; // Get the first channel's data\n\n      // Resample the audio if necessary\n      if (this.resampler) {\n        channelData = this.resampler.full(channelData);\n      }\n\n      // Add channel data to the buffer\n      this.buffer.push(...channelData);\n      // Get max volume \n      let sum = 0.0;\n      for (let i = 0; i < channelData.length; i++) {\n        sum += channelData[i] * channelData[i];\n      }\n      const maxVolume = Math.sqrt(sum / channelData.length);\n      // Check if buffer size has reached or exceeded the threshold\n      if (this.buffer.length >= this.bufferSize) {\n        const float32Array = this.isMuted \n          ? new Float32Array(this.buffer.length)\n          : new Float32Array(this.buffer);\n\n        let encodedArray = this.format === \"ulaw\"\n          ? new Uint8Array(float32Array.length)\n          : new Int16Array(float32Array.length);\n\n        // Iterate through the Float32Array and convert each sample to PCM16\n        for (let i = 0; i < float32Array.length; i++) {\n          // Clamp the value to the range [-1, 1]\n          let sample = Math.max(-1, Math.min(1, float32Array[i]));\n\n          // Scale the sample to the range [-32768, 32767]\n          let value = sample < 0 ? sample * 32768 : sample * 32767;\n          if (this.format === \"ulaw\") {\n            value = encodeSample(Math.round(value));\n          }\n\n          encodedArray[i] = value;\n        }\n\n        // Send the buffered data to the main script\n        this.port.postMessage([encodedArray, maxVolume]);\n\n        // Clear the buffer after sending\n        this.buffer = [];\n      }\n    }\n    return true; // Continue processing\n  }\n}\nregisterProcessor(\"raw-audio-processor\", RawAudioProcessor);\n`\n);\n","export function isIosDevice() {\n  return (\n    [\n      \"iPad Simulator\",\n      \"iPhone Simulator\",\n      \"iPod Simulator\",\n      \"iPad\",\n      \"iPhone\",\n      \"iPod\",\n    ].includes(navigator.platform) ||\n    // iPad on iOS 13 detection\n    (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document)\n  );\n}\n\nexport function isAndroidDevice() {\n  return /android/i.test(navigator.userAgent);\n}\n","import { loadRawAudioProcessor } from \"./rawAudioProcessor\";\nimport { FormatConfig } from \"./connection\";\nimport { isIosDevice } from \"./compatibility\";\n\nexport type InputConfig = {\n  preferHeadphonesForIosDevices?: boolean;\n};\n\nconst LIBSAMPLERATE_JS =\n  \"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\";\n\nexport class Input {\n  public static async create({\n    sampleRate,\n    format,\n    preferHeadphonesForIosDevices,\n  }: FormatConfig & InputConfig): Promise<Input> {\n    let context: AudioContext | null = null;\n    let inputStream: MediaStream | null = null;\n\n    try {\n      const options: MediaTrackConstraints = {\n        sampleRate: { ideal: sampleRate },\n        echoCancellation: { ideal: true },\n        noiseSuppression: { ideal: true },\n      };\n\n      if (isIosDevice() && preferHeadphonesForIosDevices) {\n        const availableDevices =\n          await window.navigator.mediaDevices.enumerateDevices();\n        const idealDevice = availableDevices.find(\n          d =>\n            // cautious to include \"bluetooth\" in the search\n            // as might trigger bluetooth speakers\n            d.kind === \"audioinput\" &&\n            [\"airpod\", \"headphone\", \"earphone\"].find(keyword =>\n              d.label.toLowerCase().includes(keyword)\n            )\n        );\n        if (idealDevice) {\n          options.deviceId = { ideal: idealDevice.deviceId };\n        }\n      }\n\n      const supportsSampleRateConstraint =\n        navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n      context = new window.AudioContext(\n        supportsSampleRateConstraint ? { sampleRate } : {}\n      );\n      const analyser = context.createAnalyser();\n      if (!supportsSampleRateConstraint) {\n        await context.audioWorklet.addModule(LIBSAMPLERATE_JS);\n      }\n      await loadRawAudioProcessor(context.audioWorklet);\n\n      inputStream = await navigator.mediaDevices.getUserMedia({\n        audio: options,\n      });\n\n      const source = context.createMediaStreamSource(inputStream);\n      const worklet = new AudioWorkletNode(context, \"raw-audio-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format, sampleRate });\n\n      source.connect(analyser);\n      analyser.connect(worklet);\n\n      await context.resume();\n\n      return new Input(context, analyser, worklet, inputStream);\n    } catch (error) {\n      inputStream?.getTracks().forEach(track => track.stop());\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly worklet: AudioWorkletNode,\n    public readonly inputStream: MediaStream\n  ) {}\n\n  public async close() {\n    this.inputStream.getTracks().forEach(track => track.stop());\n    await this.context.close();\n  }\n\n  public setMuted(isMuted: boolean) {\n    this.worklet.port.postMessage({ type: \"setMuted\", isMuted });\n  }\n}\n","/*\n * ulaw decoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nimport { createWorkletModuleLoader } from \"./createWorkletModuleLoader\";\n\nexport const loadAudioConcatProcessor = createWorkletModuleLoader(\n  \"audio-concat-processor\",\n  // language=JavaScript\n  `\nconst decodeTable = [0,132,396,924,1980,4092,8316,16764];\n\nexport function decodeSample(muLawSample) {\n  let sign;\n  let exponent;\n  let mantissa;\n  let sample;\n  muLawSample = ~muLawSample;\n  sign = (muLawSample & 0x80);\n  exponent = (muLawSample >> 4) & 0x07;\n  mantissa = muLawSample & 0x0F;\n  sample = decodeTable[exponent] + (mantissa << (exponent+3));\n  if (sign !== 0) sample = -sample;\n\n  return sample;\n}\n\nclass AudioConcatProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    this.buffers = []; // Initialize an empty buffer\n    this.cursor = 0;\n    this.currentBuffer = null;\n    this.wasInterrupted = false;\n    this.finished = false;\n    \n    this.port.onmessage = ({ data }) => {\n      switch (data.type) {\n        case \"setFormat\":\n          this.format = data.format;\n          break;\n        case \"buffer\":\n          this.wasInterrupted = false;\n          this.buffers.push(\n            this.format === \"ulaw\"\n              ? new Uint8Array(data.buffer)\n              : new Int16Array(data.buffer)\n          );\n          break;\n        case \"interrupt\":\n          this.wasInterrupted = true;\n          break;\n        case \"clearInterrupted\":\n          if (this.wasInterrupted) {\n            this.wasInterrupted = false;\n            this.buffers = [];\n            this.currentBuffer = null;\n          }\n      }\n    };\n  }\n  process(_, outputs) {\n    let finished = false;\n    const output = outputs[0][0];\n    for (let i = 0; i < output.length; i++) {\n      if (!this.currentBuffer) {\n        if (this.buffers.length === 0) {\n          finished = true;\n          break;\n        }\n        this.currentBuffer = this.buffers.shift();\n        this.cursor = 0;\n      }\n\n      let value = this.currentBuffer[this.cursor];\n      if (this.format === \"ulaw\") {\n        value = decodeSample(value);\n      }\n      output[i] = value / 32768;\n      this.cursor++;\n\n      if (this.cursor >= this.currentBuffer.length) {\n        this.currentBuffer = null;\n      }\n    }\n\n    if (this.finished !== finished) {\n      this.finished = finished;\n      this.port.postMessage({ type: \"process\", finished });\n    }\n\n    return true; // Continue processing\n  }\n}\n\nregisterProcessor(\"audio-concat-processor\", AudioConcatProcessor);\n`\n);\n","import { loadAudioConcatProcessor } from \"./audioConcatProcessor\";\nimport { FormatConfig } from \"./connection\";\n\nexport class Output {\n  public static async create({\n    sampleRate,\n    format,\n  }: FormatConfig): Promise<Output> {\n    let context: AudioContext | null = null;\n    try {\n      context = new AudioContext({ sampleRate });\n      const analyser = context.createAnalyser();\n      const gain = context.createGain();\n      gain.connect(analyser);\n      analyser.connect(context.destination);\n      await loadAudioConcatProcessor(context.audioWorklet);\n      const worklet = new AudioWorkletNode(context, \"audio-concat-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format });\n      worklet.connect(gain);\n\n      await context.resume();\n\n      return new Output(context, analyser, gain, worklet);\n    } catch (error) {\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly gain: GainNode,\n    public readonly worklet: AudioWorkletNode\n  ) {}\n\n  public async close() {\n    await this.context.close();\n  }\n}\n","import { Language } from \"./connection\";\n\nexport type UserTranscriptionEvent = {\n  type: \"user_transcript\";\n  user_transcription_event: { user_transcript: string };\n};\nexport type AgentResponseEvent = {\n  type: \"agent_response\";\n  agent_response_event: { agent_response: string };\n};\nexport type AgentAudioEvent = {\n  type: \"audio\";\n  audio_event: {\n    audio_base_64: string;\n    event_id: number;\n  };\n};\nexport type InterruptionEvent = {\n  type: \"interruption\";\n  interruption_event: {\n    event_id: number;\n  };\n};\nexport type InternalTentativeAgentResponseEvent = {\n  type: \"internal_tentative_agent_response\";\n  tentative_agent_response_internal_event: {\n    tentative_agent_response: string;\n  };\n};\nexport type ConfigEvent = {\n  type: \"conversation_initiation_metadata\";\n  conversation_initiation_metadata_event: {\n    conversation_id: string;\n    agent_output_audio_format: string;\n    user_input_audio_format?: string;\n  };\n};\nexport type PingEvent = {\n  type: \"ping\";\n  ping_event: {\n    event_id: number;\n    ping_ms?: number;\n  };\n};\nexport type ClientToolCallEvent = {\n  type: \"client_tool_call\";\n  client_tool_call: {\n    tool_name: string;\n    tool_call_id: string;\n    parameters: any;\n    expects_response: boolean;\n  };\n};\n\n// TODO correction missing\nexport type IncomingSocketEvent =\n  | UserTranscriptionEvent\n  | AgentResponseEvent\n  | AgentAudioEvent\n  | InterruptionEvent\n  | InternalTentativeAgentResponseEvent\n  | ConfigEvent\n  | PingEvent\n  | ClientToolCallEvent;\n\nexport type PongEvent = {\n  type: \"pong\";\n  event_id: number;\n};\nexport type UserAudioEvent = {\n  user_audio_chunk: string;\n};\nexport type UserFeedbackEvent = {\n  type: \"feedback\";\n  score: \"like\" | \"dislike\";\n  event_id: number;\n};\nexport type ClientToolResultEvent = {\n  type: \"client_tool_result\";\n  tool_call_id: string;\n  result: any;\n  is_error: boolean;\n};\nexport type InitiationClientDataEvent = {\n  type: \"conversation_initiation_client_data\";\n  conversation_config_override?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      first_message?: string;\n      language?: Language;\n    };\n    tts?: {\n      voice_id?: string;\n    };\n  };\n  custom_llm_extra_body?: any;\n  dynamic_variables?: Record<string, string | number | boolean>;\n};\nexport type ContextualUpdateEvent = {\n  type: \"contextual_update\";\n  text: string;\n};\nexport type UserMessageEvent = {\n  type: \"user_message\";\n  text: string;\n};\nexport type UserActivityEvent = {\n  type: \"user_activity\";\n};\nexport type OutgoingSocketEvent =\n  | PongEvent\n  | UserAudioEvent\n  | InitiationClientDataEvent\n  | UserFeedbackEvent\n  | ClientToolResultEvent\n  | ContextualUpdateEvent\n  | UserMessageEvent\n  | UserActivityEvent;\n\nexport function isValidSocketEvent(event: any): event is IncomingSocketEvent {\n  return !!event.type;\n}\n","import {\n  InitiationClientDataEvent,\n  ConfigEvent,\n  isValidSocketEvent,\n  OutgoingSocketEvent,\n  IncomingSocketEvent,\n} from \"./events\";\n\nconst MAIN_PROTOCOL = \"convai\";\n\nexport type Language =\n  | \"en\"\n  | \"ja\"\n  | \"zh\"\n  | \"de\"\n  | \"hi\"\n  | \"fr\"\n  | \"ko\"\n  | \"pt\"\n  | \"pt-br\"\n  | \"it\"\n  | \"es\"\n  | \"id\"\n  | \"nl\"\n  | \"tr\"\n  | \"pl\"\n  | \"sv\"\n  | \"bg\"\n  | \"ro\"\n  | \"ar\"\n  | \"cs\"\n  | \"el\"\n  | \"fi\"\n  | \"ms\"\n  | \"da\"\n  | \"ta\"\n  | \"uk\"\n  | \"ru\"\n  | \"hu\"\n  | \"hr\"\n  | \"sk\"\n  | \"no\"\n  | \"vi\";\nexport type SessionConfig = {\n  origin?: string;\n  authorization?: string;\n  overrides?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      firstMessage?: string;\n      language?: Language;\n    };\n    tts?: {\n      voiceId?: string;\n    };\n  };\n  customLlmExtraBody?: any;\n  dynamicVariables?: Record<string, string | number | boolean>;\n  useWakeLock?: boolean;\n  connectionDelay?: {\n    default: number;\n    android?: number;\n    ios?: number;\n  };\n} & (\n  | { signedUrl: string; agentId?: undefined }\n  | { agentId: string; signedUrl?: undefined }\n);\nexport type FormatConfig = {\n  format: \"pcm\" | \"ulaw\";\n  sampleRate: number;\n};\nexport type DisconnectionDetails =\n  | {\n      reason: \"error\";\n      message: string;\n      context: Event;\n    }\n  | {\n      reason: \"agent\";\n      context: CloseEvent;\n    }\n  | {\n      reason: \"user\";\n    };\nexport type OnDisconnectCallback = (details: DisconnectionDetails) => void;\nexport type OnMessageCallback = (event: IncomingSocketEvent) => void;\n\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\n\nexport class Connection {\n  public static async create(config: SessionConfig): Promise<Connection> {\n    let socket: WebSocket | null = null;\n\n    try {\n      const origin = config.origin ?? WSS_API_ORIGIN;\n      const url = config.signedUrl\n        ? config.signedUrl\n        : origin + WSS_API_PATHNAME + config.agentId;\n\n      const protocols = [MAIN_PROTOCOL];\n      if (config.authorization) {\n        protocols.push(`bearer.${config.authorization}`);\n      }\n      socket = new WebSocket(url, protocols);\n      const conversationConfig = await new Promise<\n        ConfigEvent[\"conversation_initiation_metadata_event\"]\n      >((resolve, reject) => {\n        socket!.addEventListener(\n          \"open\",\n          () => {\n            const overridesEvent: InitiationClientDataEvent = {\n              type: \"conversation_initiation_client_data\",\n            };\n\n            if (config.overrides) {\n              overridesEvent.conversation_config_override = {\n                agent: {\n                  prompt: config.overrides.agent?.prompt,\n                  first_message: config.overrides.agent?.firstMessage,\n                  language: config.overrides.agent?.language,\n                },\n                tts: {\n                  voice_id: config.overrides.tts?.voiceId,\n                },\n              };\n            }\n\n            if (config.customLlmExtraBody) {\n              overridesEvent.custom_llm_extra_body = config.customLlmExtraBody;\n            }\n\n            if (config.dynamicVariables) {\n              overridesEvent.dynamic_variables = config.dynamicVariables;\n            }\n\n            socket?.send(JSON.stringify(overridesEvent));\n          },\n          { once: true }\n        );\n        socket!.addEventListener(\"error\", event => {\n          // In case the error event is followed by a close event, we want the\n          // latter to be the one that rejects the promise as it contains more\n          // useful information.\n          setTimeout(() => reject(event), 0);\n        });\n        socket!.addEventListener(\"close\", reject);\n        socket!.addEventListener(\n          \"message\",\n          (event: MessageEvent) => {\n            const message = JSON.parse(event.data);\n\n            if (!isValidSocketEvent(message)) {\n              return;\n            }\n\n            if (message.type === \"conversation_initiation_metadata\") {\n              resolve(message.conversation_initiation_metadata_event);\n            } else {\n              console.warn(\n                \"First received message is not conversation metadata.\"\n              );\n            }\n          },\n          { once: true }\n        );\n      });\n\n      const {\n        conversation_id,\n        agent_output_audio_format,\n        user_input_audio_format,\n      } = conversationConfig;\n\n      const inputFormat = parseFormat(user_input_audio_format ?? \"pcm_16000\");\n      const outputFormat = parseFormat(agent_output_audio_format);\n\n      return new Connection(socket, conversation_id, inputFormat, outputFormat);\n    } catch (error) {\n      socket?.close();\n      throw error;\n    }\n  }\n\n  private queue: IncomingSocketEvent[] = [];\n  private disconnectionDetails: DisconnectionDetails | null = null;\n  private onDisconnectCallback: OnDisconnectCallback | null = null;\n  private onMessageCallback: OnMessageCallback | null = null;\n\n  private constructor(\n    public readonly socket: WebSocket,\n    public readonly conversationId: string,\n    public readonly inputFormat: FormatConfig,\n    public readonly outputFormat: FormatConfig\n  ) {\n    this.socket.addEventListener(\"error\", event => {\n      // In case the error event is followed by a close event, we want the\n      // latter to be the one that disconnects the session as it contains more\n      // useful information.\n      setTimeout(\n        () =>\n          this.disconnect({\n            reason: \"error\",\n            message: \"The connection was closed due to a socket error.\",\n            context: event,\n          }),\n        0\n      );\n    });\n    this.socket.addEventListener(\"close\", event => {\n      this.disconnect(\n        event.code === 1000\n          ? {\n              reason: \"agent\",\n              context: event,\n            }\n          : {\n              reason: \"error\",\n              message:\n                event.reason || \"The connection was closed by the server.\",\n              context: event,\n            }\n      );\n    });\n    this.socket.addEventListener(\"message\", event => {\n      try {\n        const parsedEvent = JSON.parse(event.data);\n        if (!isValidSocketEvent(parsedEvent)) {\n          return;\n        }\n\n        if (this.onMessageCallback) {\n          this.onMessageCallback(parsedEvent);\n        } else {\n          this.queue.push(parsedEvent);\n        }\n      } catch (_) {}\n    });\n  }\n\n  public close() {\n    this.socket.close();\n  }\n\n  public sendMessage(message: OutgoingSocketEvent) {\n    this.socket.send(JSON.stringify(message));\n  }\n\n  public onMessage(callback: OnMessageCallback) {\n    this.onMessageCallback = callback;\n    this.queue.forEach(callback);\n    this.queue = [];\n  }\n\n  public onDisconnect(callback: OnDisconnectCallback) {\n    this.onDisconnectCallback = callback;\n    if (this.disconnectionDetails) {\n      callback(this.disconnectionDetails);\n    }\n  }\n\n  private disconnect(details: DisconnectionDetails) {\n    if (!this.disconnectionDetails) {\n      this.disconnectionDetails = details;\n      this.onDisconnectCallback?.(details);\n    }\n  }\n}\n\nfunction parseFormat(format: string): FormatConfig {\n  const [formatPart, sampleRatePart] = format.split(\"_\");\n  if (![\"pcm\", \"ulaw\"].includes(formatPart)) {\n    throw new Error(`Invalid format: ${format}`);\n  }\n\n  const sampleRate = parseInt(sampleRatePart);\n  if (isNaN(sampleRate)) {\n    throw new Error(`Invalid sample rate: ${sampleRatePart}`);\n  }\n\n  return {\n    format: formatPart as FormatConfig[\"format\"],\n    sampleRate,\n  };\n}\n","import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input, InputConfig } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport {\n  Connection,\n  DisconnectionDetails,\n  OnDisconnectCallback,\n  SessionConfig,\n} from \"./utils/connection\";\nimport { ClientToolCallEvent, IncomingSocketEvent } from \"./utils/events\";\nimport { isAndroidDevice, isIosDevice } from \"./utils/compatibility\";\n\nexport type { InputConfig } from \"./utils/input\";\nexport type { IncomingSocketEvent } from \"./utils/events\";\nexport type {\n  SessionConfig,\n  DisconnectionDetails,\n  Language,\n} from \"./utils/connection\";\nexport type Role = \"user\" | \"ai\";\nexport type Mode = \"speaking\" | \"listening\";\nexport type Status =\n  | \"connecting\"\n  | \"connected\"\n  | \"disconnecting\"\n  | \"disconnected\";\nexport type Options = SessionConfig &\n  Callbacks &\n  ClientToolsConfig &\n  InputConfig;\nexport type ClientToolsConfig = {\n  clientTools: Record<\n    string,\n    (\n      parameters: any\n    ) => Promise<string | number | void> | string | number | void\n  >;\n};\nexport type Callbacks = {\n  onConnect: (props: { conversationId: string }) => void;\n  // internal debug events, not to be used\n  onDebug: (props: any) => void;\n  onDisconnect: OnDisconnectCallback;\n  onError: (message: string, context?: any) => void;\n  onMessage: (props: { message: string; source: Role }) => void;\n  onAudio: (base64Audio: string) => void;\n  onModeChange: (prop: { mode: Mode }) => void;\n  onStatusChange: (prop: { status: Status }) => void;\n  onCanSendFeedbackChange: (prop: { canSendFeedback: boolean }) => void;\n  onUnhandledClientToolCall?: (\n    params: ClientToolCallEvent[\"client_tool_call\"]\n  ) => void;\n};\n\nconst defaultClientTools = { clientTools: {} };\nconst defaultCallbacks: Callbacks = {\n  onConnect: () => {},\n  onDebug: () => {},\n  onDisconnect: () => {},\n  onError: () => {},\n  onMessage: () => {},\n  onAudio: () => {},\n  onModeChange: () => {},\n  onStatusChange: () => {},\n  onCanSendFeedbackChange: () => {},\n};\n\nconst HTTPS_API_ORIGIN = \"https://api.elevenlabs.io\";\n\nexport class Conversation {\n  public static async startSession(\n    options: SessionConfig &\n      Partial<Callbacks> &\n      Partial<ClientToolsConfig> &\n      Partial<InputConfig>\n  ): Promise<Conversation> {\n    const fullOptions: Options = {\n      ...defaultClientTools,\n      ...defaultCallbacks,\n      ...options,\n    };\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n    fullOptions.onCanSendFeedbackChange({ canSendFeedback: false });\n\n    let input: Input | null = null;\n    let connection: Connection | null = null;\n    let output: Output | null = null;\n    let preliminaryInputStream: MediaStream | null = null;\n\n    let wakeLock: WakeLockSentinel | null = null;\n    if (options.useWakeLock ?? true) {\n      try {\n        wakeLock = await navigator.wakeLock.request(\"screen\");\n      } catch (e) {\n        // Wake Lock is not required for the conversation to work\n      }\n    }\n\n    try {\n      // some browsers won't allow calling getSupportedConstraints or enumerateDevices\n      // before getting approval for microphone access\n      preliminaryInputStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n\n      const delayConfig = options.connectionDelay ?? {\n        default: 0,\n        // Give the Android AudioManager enough time to switch to the correct audio mode\n        android: 3_000,\n      };\n      let delay = delayConfig.default;\n      if (isAndroidDevice()) {\n        delay = delayConfig.android ?? delay;\n      } else if (isIosDevice()) {\n        delay = delayConfig.ios ?? delay;\n      }\n\n      if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n\n      connection = await Connection.create(options);\n      [input, output] = await Promise.all([\n        Input.create({\n          ...connection.inputFormat,\n          preferHeadphonesForIosDevices: options.preferHeadphonesForIosDevices,\n        }),\n        Output.create(connection.outputFormat),\n      ]);\n\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      preliminaryInputStream = null;\n\n      return new Conversation(fullOptions, connection, input, output, wakeLock);\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      connection?.close();\n      await input?.close();\n      await output?.close();\n      try {\n        await wakeLock?.release();\n        wakeLock = null;\n      } catch (e) {}\n      throw error;\n    }\n  }\n\n  private lastInterruptTimestamp: number = 0;\n  private mode: Mode = \"listening\";\n  private status: Status = \"connecting\";\n  private inputFrequencyData?: Uint8Array;\n  private outputFrequencyData?: Uint8Array;\n  private volume: number = 1;\n  private currentEventId: number = 1;\n  private lastFeedbackEventId: number = 1;\n  private canSendFeedback: boolean = false;\n\n  private constructor(\n    private readonly options: Options,\n    private readonly connection: Connection,\n    public readonly input: Input,\n    public readonly output: Output,\n    public wakeLock: WakeLockSentinel | null\n  ) {\n    this.options.onConnect({ conversationId: connection.conversationId });\n\n    this.connection.onDisconnect(this.endSessionWithDetails);\n    this.connection.onMessage(this.onMessage);\n\n    this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n    this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n    this.updateStatus(\"connected\");\n  }\n\n  public endSession = () => this.endSessionWithDetails({ reason: \"user\" });\n\n  private endSessionWithDetails = async (details: DisconnectionDetails) => {\n    if (this.status !== \"connected\" && this.status !== \"connecting\") return;\n    this.updateStatus(\"disconnecting\");\n\n    try {\n      await this.wakeLock?.release();\n      this.wakeLock = null;\n    } catch (e) {}\n\n    this.connection.close();\n    await this.input.close();\n    await this.output.close();\n\n    this.updateStatus(\"disconnected\");\n    this.options.onDisconnect(details);\n  };\n\n  private updateMode = (mode: Mode) => {\n    if (mode !== this.mode) {\n      this.mode = mode;\n      this.options.onModeChange({ mode });\n    }\n  };\n\n  private updateStatus = (status: Status) => {\n    if (status !== this.status) {\n      this.status = status;\n      this.options.onStatusChange({ status });\n    }\n  };\n\n  private updateCanSendFeedback = () => {\n    const canSendFeedback = this.currentEventId !== this.lastFeedbackEventId;\n    if (this.canSendFeedback !== canSendFeedback) {\n      this.canSendFeedback = canSendFeedback;\n      this.options.onCanSendFeedbackChange({ canSendFeedback });\n    }\n  };\n\n  private onMessage = async (parsedEvent: IncomingSocketEvent) => {\n    switch (parsedEvent.type) {\n      case \"interruption\": {\n        if (parsedEvent.interruption_event) {\n          this.lastInterruptTimestamp = parsedEvent.interruption_event.event_id;\n        }\n        this.fadeOutAudio();\n        return;\n      }\n\n      case \"agent_response\": {\n        this.options.onMessage({\n          source: \"ai\",\n          message: parsedEvent.agent_response_event.agent_response,\n        });\n        return;\n      }\n\n      case \"user_transcript\": {\n        this.options.onMessage({\n          source: \"user\",\n          message: parsedEvent.user_transcription_event.user_transcript,\n        });\n        return;\n      }\n\n      case \"internal_tentative_agent_response\": {\n        this.options.onDebug({\n          type: \"tentative_agent_response\",\n          response:\n            parsedEvent.tentative_agent_response_internal_event\n              .tentative_agent_response,\n        });\n        return;\n      }\n\n      case \"client_tool_call\": {\n        if (\n          this.options.clientTools.hasOwnProperty(\n            parsedEvent.client_tool_call.tool_name\n          )\n        ) {\n          try {\n            const result =\n              (await this.options.clientTools[\n                parsedEvent.client_tool_call.tool_name\n              ](parsedEvent.client_tool_call.parameters)) ??\n              \"Client tool execution successful.\"; // default client-tool call response\n\n            // The API expects result to be a string, so we need to convert it if it's not already a string\n            const formattedResult =\n              typeof result === \"object\"\n                ? JSON.stringify(result)\n                : String(result);\n\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: formattedResult,\n              is_error: false,\n            });\n          } catch (e) {\n            this.onError(\n              \"Client tool execution failed with following error: \" +\n                (e as Error)?.message,\n              {\n                clientToolName: parsedEvent.client_tool_call.tool_name,\n              }\n            );\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: \"Client tool execution failed: \" + (e as Error)?.message,\n              is_error: true,\n            });\n          }\n        } else {\n          if (this.options.onUnhandledClientToolCall) {\n            this.options.onUnhandledClientToolCall(\n              parsedEvent.client_tool_call\n            );\n\n            return;\n          }\n\n          this.onError(\n            `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            {\n              clientToolName: parsedEvent.client_tool_call.tool_name,\n            }\n          );\n          this.connection.sendMessage({\n            type: \"client_tool_result\",\n            tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n            result: `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            is_error: true,\n          });\n        }\n\n        return;\n      }\n\n      case \"audio\": {\n        if (this.lastInterruptTimestamp <= parsedEvent.audio_event.event_id) {\n          this.options.onAudio(parsedEvent.audio_event.audio_base_64);\n          this.addAudioBase64Chunk(parsedEvent.audio_event.audio_base_64);\n          this.currentEventId = parsedEvent.audio_event.event_id;\n          this.updateCanSendFeedback();\n          this.updateMode(\"speaking\");\n        }\n        return;\n      }\n\n      case \"ping\": {\n        this.connection.sendMessage({\n          type: \"pong\",\n          event_id: parsedEvent.ping_event.event_id,\n        });\n        // parsedEvent.ping_event.ping_ms can be used on client side, for example\n        // to warn if ping is too high that experience might be degraded.\n        return;\n      }\n\n      // unhandled events are expected to be internal events\n      default: {\n        this.options.onDebug(parsedEvent);\n        return;\n      }\n    }\n  };\n\n  private onInputWorkletMessage = (event: MessageEvent): void => {\n    const rawAudioPcmData = event.data[0];\n    const maxVolume = event.data[1];\n\n    // check if the sound was loud enough, so we don't send unnecessary chunks\n    // then forward audio to websocket\n    //if (maxVolume > 0.001) {\n    if (this.status === \"connected\") {\n      this.connection.sendMessage({\n        user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n        //sample_rate: this.inputAudioContext?.inputSampleRate || this.inputSampleRate,\n      });\n    }\n    //}\n  };\n\n  private onOutputWorkletMessage = ({ data }: MessageEvent): void => {\n    if (data.type === \"process\") {\n      this.updateMode(data.finished ? \"listening\" : \"speaking\");\n    }\n  };\n\n  private addAudioBase64Chunk = (chunk: string) => {\n    this.output.gain.gain.value = this.volume;\n    this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    this.output.worklet.port.postMessage({\n      type: \"buffer\",\n      buffer: base64ToArrayBuffer(chunk),\n    });\n  };\n\n  private fadeOutAudio = () => {\n    // mute agent\n    this.updateMode(\"listening\");\n    this.output.worklet.port.postMessage({ type: \"interrupt\" });\n    this.output.gain.gain.exponentialRampToValueAtTime(\n      0.0001,\n      this.output.context.currentTime + 2\n    );\n\n    // reset volume back\n    setTimeout(() => {\n      this.output.gain.gain.value = this.volume;\n      this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    }, 2000); // Adjust the duration as needed\n  };\n\n  private onError = (message: string, context?: any) => {\n    console.error(message, context);\n    this.options.onError(message, context);\n  };\n\n  private calculateVolume = (frequencyData: Uint8Array) => {\n    if (frequencyData.length === 0) {\n      return 0;\n    }\n\n    // TODO: Currently this averages all frequencies, but we should probably\n    // bias towards the frequencies that are more typical for human voice\n    let volume = 0;\n    for (let i = 0; i < frequencyData.length; i++) {\n      volume += frequencyData[i] / 255;\n    }\n    volume /= frequencyData.length;\n\n    return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n  };\n\n  public getId = () => this.connection.conversationId;\n\n  public isOpen = () => this.status === \"connected\";\n\n  public setVolume = ({ volume }: { volume: number }) => {\n    this.volume = volume;\n  };\n\n  public setMicMuted = (isMuted: boolean) => {\n    this.input.setMuted(isMuted);\n  };\n\n  public getInputByteFrequencyData = () => {\n    this.inputFrequencyData ??= new Uint8Array(\n      this.input.analyser.frequencyBinCount\n    );\n    this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n    return this.inputFrequencyData;\n  };\n\n  public getOutputByteFrequencyData = () => {\n    this.outputFrequencyData ??= new Uint8Array(\n      this.output.analyser.frequencyBinCount\n    );\n    this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n    return this.outputFrequencyData;\n  };\n\n  public getInputVolume = () => {\n    return this.calculateVolume(this.getInputByteFrequencyData());\n  };\n\n  public getOutputVolume = () => {\n    return this.calculateVolume(this.getOutputByteFrequencyData());\n  };\n\n  public sendFeedback = (like: boolean) => {\n    if (!this.canSendFeedback) {\n      console.warn(\n        this.lastFeedbackEventId === 0\n          ? \"Cannot send feedback: the conversation has not started yet.\"\n          : \"Cannot send feedback: feedback has already been sent for the current response.\"\n      );\n      return;\n    }\n\n    this.connection.sendMessage({\n      type: \"feedback\",\n      score: like ? \"like\" : \"dislike\",\n      event_id: this.currentEventId,\n    });\n    this.lastFeedbackEventId = this.currentEventId;\n    this.updateCanSendFeedback();\n  };\n\n  public sendContextualUpdate = (text: string) => {\n    this.connection.sendMessage({\n      type: \"contextual_update\",\n      text,\n    });\n  };\n\n  public sendUserMessage = (text: string) => {\n    this.connection.sendMessage({\n      type: \"user_message\",\n      text,\n    });\n  };\n\n  public sendUserActivity = () => {\n    this.connection.sendMessage({\n      type: \"user_activity\",\n    });\n  };\n}\n\nexport function postOverallFeedback(\n  conversationId: string,\n  like: boolean,\n  origin: string = HTTPS_API_ORIGIN\n) {\n  return fetch(`${origin}/v1/convai/conversations/${conversationId}/feedback`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      feedback: like ? \"like\" : \"dislike\",\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n}\n"],"names":["base64ToArrayBuffer","base64","binaryString","window","atob","len","length","bytes","Uint8Array","i","charCodeAt","buffer","URLCache","Map","createWorkletModuleLoader","name","sourceCode","worklet","_exit","_temp2","_result","_catch","moduleURL","btoa","Promise","resolve","addModule","then","set","Error","url","get","blob","Blob","type","blobURL","URL","createObjectURL","_temp","revokeObjectURL","e","reject","loadRawAudioProcessor","isIosDevice","includes","navigator","platform","userAgent","document","Input","context","analyser","inputStream","this","create","_ref","sampleRate","format","preferHeadphonesForIosDevices","_temp4","audioWorklet","mediaDevices","getUserMedia","audio","options","_navigator$mediaDevic","source","createMediaStreamSource","AudioWorkletNode","port","postMessage","connect","resume","supportsSampleRateConstraint","getSupportedConstraints","AudioContext","createAnalyser","ideal","echoCancellation","noiseSuppression","_temp3","enumerateDevices","availableDevices","idealDevice","find","d","kind","keyword","label","toLowerCase","deviceId","error","_inputStream","_context","getTracks","forEach","track","stop","close","_proto","prototype","setMuted","isMuted","loadAudioConcatProcessor","Output","gain","createGain","destination","isValidSocketEvent","event","Connection","socket","conversationId","inputFormat","outputFormat","_this","queue","disconnectionDetails","onDisconnectCallback","onMessageCallback","addEventListener","setTimeout","disconnect","reason","message","code","parsedEvent","JSON","parse","data","push","_","config","origin","_config$origin","signedUrl","agentId","protocols","authorization","WebSocket","_socket","_config$overrides$age","_config$overrides$age2","_config$overrides$age3","_config$overrides$tts","overridesEvent","overrides","conversation_config_override","agent","prompt","first_message","firstMessage","language","tts","voice_id","voiceId","customLlmExtraBody","custom_llm_extra_body","dynamicVariables","dynamic_variables","send","stringify","once","conversation_initiation_metadata_event","console","warn","conversationConfig","conversation_id","agent_output_audio_format","user_input_audio_format","parseFormat","_socket2","sendMessage","onMessage","callback","onDisconnect","details","_this$onDisconnectCal","call","_format$split","split","formatPart","sampleRatePart","parseInt","isNaN","defaultClientTools","clientTools","defaultCallbacks","onConnect","onDebug","onError","onAudio","onModeChange","onStatusChange","onCanSendFeedbackChange","Conversation","connection","input","output","wakeLock","_this2","_this3","lastInterruptTimestamp","mode","status","inputFrequencyData","outputFrequencyData","volume","currentEventId","lastFeedbackEventId","canSendFeedback","endSession","endSessionWithDetails","updateStatus","_this2$wakeLock","release","updateMode","updateCanSendFeedback","interruption_event","event_id","fadeOutAudio","agent_response_event","agent_response","user_transcription_event","user_transcript","response","tentative_agent_response_internal_event","tentative_agent_response","hasOwnProperty","client_tool_call","tool_name","parameters","result","formattedResult","String","tool_call_id","is_error","clientToolName","onUnhandledClientToolCall","audio_event","audio_base_64","addAudioBase64Chunk","ping_event","onInputWorkletMessage","b","user_audio_chunk","fromCharCode","apply","onOutputWorkletMessage","finished","chunk","value","exponentialRampToValueAtTime","currentTime","calculateVolume","frequencyData","getId","isOpen","setVolume","_ref2","setMicMuted","getInputByteFrequencyData","_this$inputFrequencyD","frequencyBinCount","getByteFrequencyData","getOutputByteFrequencyData","getInputVolume","getOutputVolume","sendFeedback","like","score","sendContextualUpdate","text","sendUserMessage","sendUserActivity","onmessage","startSession","_temp10","_options$connectionDe","_temp6","_Connection$create","all","_extends","_Promise$all","_preliminaryInputStre","preliminaryInputStream","fullOptions","_delayConfig$android","delayConfig","connectionDelay","default","android","delay","test","_delayConfig$ios","ios","_temp5","_preliminaryInputStre2","_connection","_input","_output","_temp8","_temp7","_wakeLock","_temp9","_options$useWakeLock","useWakeLock","request","_navigator$wakeLock$r","fetch","method","body","feedback","headers"],"mappings":"wbAOgB,SAAAA,EAAoBC,GAIlC,IAHA,IAAMC,EAAeC,OAAOC,KAAKH,GAC3BI,EAAMH,EAAaI,OACnBC,EAAQ,IAAIC,WAAWH,GACpBI,EAAI,EAAGA,EAAIJ,EAAKI,IACvBF,EAAME,GAAKP,EAAaQ,WAAWD,GAErC,OAAOF,EAAMI,MACf,wFCfA,IAAMC,EAAW,IAAIC,IAEL,SAAAC,EAA0BC,EAAcC,GACtD,OAAcC,SAAAA,GAAyB,IAAA,IA4BpCC,EA5BoCC,EAAA,SAAAC,GAAAF,OAAAA,EAAAE,EAAAC,EAAA,WAoBnC,IACMC,EAAkDrB,sCADzCsB,KAAKP,GAC6C,OAAAQ,QAAAC,QAC3DR,EAAQS,UAAUJ,IAAUK,gBAClCf,EAASgB,IAAIb,EAAMO,EAAW,EAChC,EAAgB,WACd,MAAM,IAAIO,4BACcd,EAAI,iEAE9B,EAACG,EA3BKY,EAAMlB,EAASmB,IAAIhB,GACzB,GAAIe,EACF,OAAAN,QAAAC,QAAOR,EAAQS,UAAUI,IAG3B,IAAME,EAAO,IAAIC,KAAK,CAACjB,GAAa,CAAEkB,KAAM,2BACtCC,EAAUC,IAAIC,gBAAgBL,GAAMM,EAAAjB,EACtC,WAAA,OAAAG,QAAAC,QACIR,EAAQS,UAAUS,IAAQR,gBAChCf,EAASgB,IAAIb,EAAMoB,GAASjB,EAE9B,CAAA,EAAA,EAAQ,WACNkB,IAAIG,gBAAgBJ,EACtB,GAACX,OAAAA,QAAAC,QAAAa,GAAAA,EAAAX,KAAAW,EAAAX,KAAAR,GAAAA,EAAAmB,GAeH,CAAC,MAAAE,GAAA,OAAAhB,QAAAiB,OAAAD,EACH,CAAA,CAAA,CC1BO,IAAME,EAAwB5B,EACnC,ytHCRc6B,IACd,MACE,CACE,iBACA,mBACA,iBACA,OACA,SACA,QACAC,SAASC,UAAUC,WAEpBD,UAAUE,UAAUH,SAAS,QAAU,eAAgBI,QAE5D,CCLA,IAGaC,0BAkEX,SAAAA,EACkBC,EACAC,EACAlC,EACAmC,QAHAF,aAAA,EAAAG,KACAF,cAAA,EAAAE,KACApC,aACAmC,EAAAA,KAAAA,iBAHA,EAAAC,KAAOH,QAAPA,EACAG,KAAQF,SAARA,EACAE,KAAOpC,QAAPA,EACAoC,KAAWD,YAAXA,CACf,CAACH,EAtEgBK,gBAAMC,OACxBC,EAAUD,EAAVC,WACAC,EAAMF,EAANE,OACAC,EAA6BH,EAA7BG,8BAC2B,IAC3B,IAAIR,EAA+B,KAC/BE,EAAkC,KAAK,OAAA5B,QAAAC,gCAAA,WAEvCkC,SAAAA,aAAAxC,IAAA,OAAAK,QAAAC,QAkCIiB,EAAsBQ,EAAQU,eAAajC,uBAAAH,QAAAC,QAE7BoB,UAAUgB,aAAaC,aAAa,CACtDC,MAAOC,KACPrC,KAAAsC,SAAAA,GAEF,IAAMC,EAAShB,EAAQiB,wBAJvBf,EAAWa,GAKLhD,EAAU,IAAImD,iBAAiBlB,EAAS,uBAIpB,OAH1BjC,EAAQoD,KAAKC,YAAY,CAAEpC,KAAM,YAAauB,OAAAA,EAAQD,WAAAA,IAEtDU,EAAOK,QAAQpB,GACfA,EAASoB,QAAQtD,GAASO,QAAAC,QAEpByB,EAAQsB,UAAQ7C,KAEtB,WAAA,WAAWsB,EAAMC,EAASC,EAAUlC,EAASmC,EAAa,EAzB1D,EAAA,EAAA,CAAA,IAAMqB,EACJ5B,UAAUgB,aAAaa,0BAA0BlB,WAK7CL,GAHND,EAAU,IAAI/C,OAAOwE,aACnBF,EAA+B,CAAEjB,WAAAA,GAAe,CAAA,IAEzBoB,iBAAiBtC,EACtC,WAAA,IAACmC,EAA4B,OAAAjD,QAAAC,QACzByB,EAAQU,aAAalC,UA3CjC,sGA2C4DC,KAAA,aAAA,CADpD,GACoD,OAAAW,GAAAA,EAAAX,KAAAW,EAAAX,KAAAR,GAAAA,GAAA,CA/BxD,IAAM6C,EAAiC,CACrCR,WAAY,CAAEqB,MAAOrB,GACrBsB,iBAAkB,CAAED,OAAO,GAC3BE,iBAAkB,CAAEF,OAAO,IAC3BG,EAEErC,WAAAA,GAAAA,KAAiBe,EAA6BlC,OAAAA,QAAAC,QAExCtB,OAAO0C,UAAUgB,aAAaoB,oBAAkBtD,KAAA,SADlDuD,GAEN,IAAMC,EAAcD,EAAiBE,KACnC,SAAAC,GAAC,MAGY,eAAXA,EAAEC,MACF,CAAC,SAAU,YAAa,YAAYF,KAAK,SAAAG,GACvC,OAAAF,EAAEG,MAAMC,cAAc7C,SAAS2C,EAAQ,EACxC,GAEDJ,IACFnB,EAAQ0B,SAAW,CAAEb,MAAOM,EAAYO,aAbxC/C,UAamDqC,GAAAA,EAAArD,KAAAqD,EAAArD,KAAAgC,GAAAA,GA8BzD,6DApD2CtC,CAAA,WAoDlCsE,GAAOC,IAAAA,EAAAC,EAGd,MAFW,OAAXD,EAAAxC,IAAAwC,EAAaE,YAAYC,QAAQ,SAAAC,UAASA,EAAMC,MAAM,UACtDJ,EAAA3C,IAAA2C,EAASK,QACHP,CACR,GACF,CAAC,MAAAnD,GAAA,OAAAhB,QAAAiB,OAAAD,SAAA2D,EAAAlD,EAAAmD,iBAAAD,EASYD,MAAK,WAAA,IAC4C,OAA5D7C,KAAKD,YAAY0C,YAAYC,QAAQ,SAAAC,UAASA,EAAMC,MAAM,GAAEzE,QAAAC,QAA5D4B,KACWH,QAAQgD,SAAOvE,KAAA,WAAA,EAC5B,CAAC,MAAAa,GAAAhB,OAAAA,QAAAiB,OAAAD,EAAA,CAAA,EAAA2D,EAEME,SAAA,SAASC,GACdjD,KAAKpC,QAAQoD,KAAKC,YAAY,CAAEpC,KAAM,WAAYoE,QAAAA,GACpD,EAACrD,CAAA,ICpFUsD,EAA2BzF,EACtC,2zECLW0F,0BA0BX,SAAAA,EACkBtD,EACAC,EACAsD,EACAxF,QAHAiC,aAAA,EAAAG,KACAF,cAAA,EAAAE,KACAoD,UACAxF,EAAAA,KAAAA,eAHAoC,KAAOH,QAAPA,EACAG,KAAQF,SAARA,EACAE,KAAIoD,KAAJA,EACApD,KAAOpC,QAAPA,CACf,QAACuF,EA9BgBlD,OAAM,SAAAC,GACxB,IAAAC,EAAUD,EAAVC,WACAC,EAAMF,EAANE,WAEA,IAAIP,EAA+B,KAAK,OAAA1B,QAAAC,iCAGhC0B,GADND,EAAU,IAAIyB,aAAa,CAAEnB,WAAAA,KACJoB,kBACnB6B,EAAOvD,EAAQwD,cAChBnC,QAAQpB,GACbA,EAASoB,QAAQrB,EAAQyD,aAAanF,QAAAC,QAChC8E,EAAyBrD,EAAQU,eAAajC,KAAA,WACpD,IAAMV,EAAU,IAAImD,iBAAiBlB,EAAS,0BAExB,OADtBjC,EAAQoD,KAAKC,YAAY,CAAEpC,KAAM,YAAauB,OAAAA,IAC9CxC,EAAQsD,QAAQkC,GAAMjF,QAAAC,QAEhByB,EAAQsB,UAAQ7C,gBAEtB,OAAO,IAAI6E,EAAOtD,EAASC,EAAUsD,EAAMxF,EAAS,EACtD,yBAdI,IAEIkC,EACAsD,sCAJgCpF,CACpC,EAcKsE,SAAAA,GAAOE,IAAAA,EAEd,MADO,OAAPA,EAAA3C,IAAA2C,EAASK,QACHP,CACR,GACF,CAAC,MAAAnD,GAAAhB,OAAAA,QAAAiB,OAAAD,EAAA2D,CAAAA,EAAAK,EAAAJ,UASYF,iBAAK,IACN1E,OAAAA,QAAAC,QAAJ4B,KAAKH,QAAQgD,SAAOvE,KAC5B,aAAA,CAAC,MAAAa,UAAAhB,QAAAiB,OAAAD,KAAAgE,CAAA,ICmFa,SAAAI,EAAmBC,GACjC,QAASA,EAAM3E,IACjB,CCnHA,IAqFa4E,eAmGX,WAAA,SAAAA,EACkBC,EACAC,EACAC,EACAC,GAA0B,IAAAC,EAAA9D,KAAAA,KAH1B0D,YAAA,EAAA1D,KACA2D,oBAAA,EAAA3D,KACA4D,iBAAA,EAAA5D,KACA6D,kBAAA,EAAA7D,KATV+D,MAA+B,GAAE/D,KACjCgE,qBAAoD,KAAIhE,KACxDiE,qBAAoD,KAAIjE,KACxDkE,kBAA8C,KAGpClE,KAAM0D,OAANA,EACA1D,KAAc2D,eAAdA,EACA3D,KAAW4D,YAAXA,EACA5D,KAAY6D,aAAZA,EAEhB7D,KAAK0D,OAAOS,iBAAiB,QAAS,SAAAX,GAIpCY,WACE,WACE,OAAAN,EAAKO,WAAW,CACdC,OAAQ,QACRC,QAAS,mDACT1E,QAAS2D,GACT,EACJ,EAEJ,GACAxD,KAAK0D,OAAOS,iBAAiB,QAAS,SAAAX,GACpCM,EAAKO,WACY,MAAfb,EAAMgB,KACF,CACEF,OAAQ,QACRzE,QAAS2D,GAEX,CACEc,OAAQ,QACRC,QACEf,EAAMc,QAAU,2CAClBzE,QAAS2D,GAGnB,GACAxD,KAAK0D,OAAOS,iBAAiB,UAAW,SAAAX,GACtC,IACE,IAAMiB,EAAcC,KAAKC,MAAMnB,EAAMoB,MACrC,IAAKrB,EAAmBkB,GACtB,OAGEX,EAAKI,kBACPJ,EAAKI,kBAAkBO,GAEvBX,EAAKC,MAAMc,KAAKJ,EAEpB,CAAE,MAAOK,GACX,CAAA,EACF,CAACrB,EAnJmBxD,OAAM,SAAC8E,GAAqB,IAC9C,IAAIrB,EAA2B,KAAK,OAAAvF,QAAAC,iCAG5B4G,EAAsBC,OAAhBA,EAAGF,EAAOC,QAAMC,EARX,0BASXxG,EAAMsG,EAAOG,UACfH,EAAOG,UACPF,EAVe,oCAUaD,EAAOI,QAEjCC,EAAY,CA/FF,UAgGZL,EAAOM,eACTD,EAAUP,KAAI,UAAWE,EAAOM,eAElC3B,EAAS,IAAI4B,UAAU7G,EAAK2G,GAAWjH,QAAAC,QACN,IAAID,QAEnC,SAACC,EAASgB,GACVsE,EAAQS,iBACN,OACA,WAAKoB,IAAAA,EAKmBC,EAAAC,EAAAC,EAAAC,EAJhBC,EAA4C,CAChD/G,KAAM,uCAGJkG,EAAOc,YACTD,EAAeE,6BAA+B,CAC5CC,MAAO,CACLC,OAA8B,OAAxBR,EAAET,EAAOc,UAAUE,YAAK,EAAtBP,EAAwBQ,OAChCC,cAAqC,OAAxBR,EAAEV,EAAOc,UAAUE,YAAK,EAAtBN,EAAwBS,aACvCC,SAAgC,OAAxBT,EAAEX,EAAOc,UAAUE,YAAK,EAAtBL,EAAwBS,UAEpCC,IAAK,CACHC,SAAUV,OAAFA,EAAEZ,EAAOc,UAAUO,UAAjBT,EAAAA,EAAsBW,WAKlCvB,EAAOwB,qBACTX,EAAeY,sBAAwBzB,EAAOwB,oBAG5CxB,EAAO0B,mBACTb,EAAec,kBAAoB3B,EAAO0B,kBAG5ClB,OAAAA,EAAA7B,IAAA6B,EAAQoB,KAAKjC,KAAKkC,UAAUhB,GAC9B,EACA,CAAEiB,MAAM,IAEVnD,EAAQS,iBAAiB,QAAS,SAAAX,GAIhCY,WAAW,WAAM,OAAAhF,EAAOoE,EAAM,EAAE,EAClC,GACAE,EAAQS,iBAAiB,QAAS/E,GAClCsE,EAAQS,iBACN,UACA,SAACX,GACC,IAAMe,EAAUG,KAAKC,MAAMnB,EAAMoB,MAE5BrB,EAAmBgB,KAIH,qCAAjBA,EAAQ1F,KACVT,EAAQmG,EAAQuC,wCAEhBC,QAAQC,KACN,wDAGN,EACA,CAAEH,MAAM,GAEZ,IAAEvI,KAAA,SA7DI2I,GA+DN,IACEC,EAGED,EAHFC,gBACAC,EAEEF,EAFFE,0BACAC,EACEH,EADFG,wBAGIxD,EAAcyD,EAAYD,MAAAA,EAAAA,EAA2B,aACrDvD,EAAewD,EAAYF,GAEjC,OAAW,IAAA1D,EAAWC,EAAQwD,EAAiBtD,EAAaC,EAAc,yBArFxC,IAEhCoB,EACID,EACAvG,EAIA2G,sCAR4BpH,CAAA,EAsF3BsE,SAAAA,GAAO,IAAAgF,EAEd,MADAA,OAAAA,EAAA5D,IAAA4D,EAAQzE,QACFP,CACR,GACF,CAAC,MAAAnD,GAAAhB,OAAAA,QAAAiB,OAAAD,EAAA2D,CAAAA,EAAAA,IAAAA,EAAAW,EAAAV,UAoFAU,OApFAX,EA0DMD,MAAA,WACL7C,KAAK0D,OAAOb,OACd,EAACC,EAEMyE,YAAA,SAAYhD,GACjBvE,KAAK0D,OAAOiD,KAAKjC,KAAKkC,UAAUrC,GAClC,EAACzB,EAEM0E,UAAA,SAAUC,GACfzH,KAAKkE,kBAAoBuD,EACzBzH,KAAK+D,MAAMrB,QAAQ+E,GACnBzH,KAAK+D,MAAQ,EACf,EAACjB,EAEM4E,aAAA,SAAaD,GAClBzH,KAAKiE,qBAAuBwD,EACxBzH,KAAKgE,sBACPyD,EAASzH,KAAKgE,qBAElB,EAAClB,EAEOuB,WAAA,SAAWsD,GACeC,IAAAA,EAA3B5H,KAAKgE,uBACRhE,KAAKgE,qBAAuB2D,EAC5BC,OAAAA,EAAA5H,KAAKiE,uBAAL2D,EAAAC,KAAI7H,KAAwB2H,GAEhC,EAAClE,CAAA,CA7ED,GAgFF,SAAS4D,EAAYjH,GACnB,IAAA0H,EAAqC1H,EAAO2H,MAAM,KAA3CC,EAAUF,EAAEG,GAAAA,EAAcH,EACjC,GAAA,IAAK,CAAC,MAAO,QAAQvI,SAASyI,GAC5B,MAAU,IAAAxJ,MAAK,mBAAoB4B,GAGrC,IAAMD,EAAa+H,SAASD,GAC5B,GAAIE,MAAMhI,GACR,MAAU,IAAA3B,MAAK,wBAAyByJ,GAG1C,MAAO,CACL7H,OAAQ4H,EACR7H,WAAAA,EAEJ,wFCzOA,IAAMiI,EAAqB,CAAEC,YAAa,IACpCC,EAA8B,CAClCC,UAAW,WAAK,EAChBC,QAAS,WAAQ,EACjBd,aAAc,WAAK,EACnBe,QAAS,WAAQ,EACjBjB,UAAW,WAAQ,EACnBkB,QAAS,WAAK,EACdC,aAAc,WAAQ,EACtBC,eAAgB,WAAK,EACrBC,wBAAyB,0CA+FzB,WAAA,SAAAC,EACmBnI,EACAoI,EACDC,EACAC,EACTC,GAAiC,IAAAC,EAepCnJ,KAAIoJ,EA0CFpJ,KAAI8D,EAAA9D,KAAAA,KA7DOW,aACAoI,EAAAA,KAAAA,gBACDC,EAAAA,KAAAA,kBACAC,YAAA,EAAAjJ,KACTkJ,cAAA,EAAAlJ,KAfDqJ,uBAAiC,EAACrJ,KAClCsJ,KAAa,YACbC,KAAAA,OAAiB,aAAYvJ,KAC7BwJ,wBAAkB,EAAAxJ,KAClByJ,yBACAC,EAAAA,KAAAA,OAAiB,OACjBC,eAAyB,EAAC3J,KAC1B4J,oBAA8B,EAC9BC,KAAAA,iBAA2B,EAAK7J,KAmBjC8J,WAAa,kBAAMhG,EAAKiG,sBAAsB,CAAEzF,OAAQ,QAAS,EAEhEyF,KAAAA,+BAA+BpC,GAA6B,IAAI7J,IAAAA,aAS9C,OAAxBqL,EAAKJ,WAAWlG,QAAQ1E,QAAAC,QAClB+K,EAAKH,MAAMnG,SAAOvE,KAAAH,WAAAA,OAAAA,QAAAC,QAClB+K,EAAKF,OAAOpG,SAAOvE,gBAEzB6K,EAAKa,aAAa,gBAClBb,EAAKxI,QAAQ+G,aAAaC,EAAS,EAAA,EAAA,EAbnC,GAAoB,cAAhBwB,EAAKI,QAA0C,eAAhBJ,EAAKI,OAAyB,OAAApL,QAAAC,UACjE+K,EAAKa,aAAa,iBAAiB,IAAA/K,EAAAjB,EAE/B,WAAA,IAAAiM,EAAA9L,OAAAA,QAAAC,QACI6L,OADJA,EACId,EAAKD,eAALe,EAAAA,EAAeC,WAAS5L,gBAC9B6K,EAAKD,SAAW,IAAK,EACvB,EAAC/K,cAAAA,OAAAA,QAAAC,QAAAa,GAAAA,EAAAX,KAAAW,EAAAX,KAAAR,GAAAA,IAQH,CAAC,MAAAqB,GAAA,OAAAhB,QAAAiB,OAAAD,EAAA,CAAA,EAAAa,KAEOmK,WAAa,SAACb,GAChBA,IAASxF,EAAKwF,OAChBxF,EAAKwF,KAAOA,EACZxF,EAAKnD,QAAQgI,aAAa,CAAEW,KAAAA,IAEhC,EAACtJ,KAEOgK,aAAe,SAACT,GAClBA,IAAWzF,EAAKyF,SAClBzF,EAAKyF,OAASA,EACdzF,EAAKnD,QAAQiI,eAAe,CAAEW,OAAAA,IAElC,EAEQa,KAAAA,sBAAwB,WAC9B,IAAMP,EAAkB/F,EAAK6F,iBAAmB7F,EAAK8F,oBACjD9F,EAAK+F,kBAAoBA,IAC3B/F,EAAK+F,gBAAkBA,EACvB/F,EAAKnD,QAAQkI,wBAAwB,CAAEgB,gBAAAA,IAE3C,EAEQrC,KAAAA,mBAAmB/C,GAAgC,IACzD,OAAQA,EAAY5F,MAClB,IAAK,eAKH,OAJI4F,EAAY4F,qBACdjB,EAAKC,uBAAyB5E,EAAY4F,mBAAmBC,UAE/DlB,EAAKmB,eACLpM,QAAAC,UAGF,IAAK,iBAKH,OAJAgL,EAAKzI,QAAQ6G,UAAU,CACrB3G,OAAQ,KACR0D,QAASE,EAAY+F,qBAAqBC,iBAE5CtM,QAAAC,UAGF,IAAK,kBAKH,OAJAgL,EAAKzI,QAAQ6G,UAAU,CACrB3G,OAAQ,OACR0D,QAASE,EAAYiG,yBAAyBC,kBAEhDxM,QAAAC,UAGF,IAAK,oCAOH,OANAgL,EAAKzI,QAAQ6H,QAAQ,CACnB3J,KAAM,2BACN+L,SACEnG,EAAYoG,wCACTC,2BAEP3M,QAAAC,UAGF,IAAK,mBAAoBD,OAAAA,QAAAC,QAAA,WAAA,GAErBgL,EAAKzI,QAAQ0H,YAAY0C,eACvBtG,EAAYuG,iBAAiBC,WAC9BtJ,CAAAA,IAAAA,EAAA3D,EAAA,WAEGG,OAAAA,QAAAC,QAEOgL,EAAKzI,QAAQ0H,YAClB5D,EAAYuG,iBAAiBC,WAC7BxG,EAAYuG,iBAAiBE,aAAW5M,KAAA,SAHtC6M,GAON,IAAMC,EACc,iBAAXD,EACHzG,KAAKkC,UAAUuE,GACfE,OAAOF,GAEb/B,EAAKL,WAAWxB,YAAY,CAC1B1I,KAAM,qBACNyM,aAAc7G,EAAYuG,iBAAiBM,aAC3CH,OAAQC,EACRG,UAAU,GACT,EACL,EAASpM,SAAAA,GACPiK,EAAKX,QACH,uDACGtJ,MAAAA,OAAAA,EAAAA,EAAaoF,SAChB,CACEiH,eAAgB/G,EAAYuG,iBAAiBC,YAGjD7B,EAAKL,WAAWxB,YAAY,CAC1B1I,KAAM,qBACNyM,aAAc7G,EAAYuG,iBAAiBM,aAC3CH,OAAQ,kCAA+C,MAAXhM,OAAW,EAAXA,EAAaoF,SACzDgH,UAAU,GAEd,GAAC5J,GAAAA,GAAAA,EAAArD,KAAA,OAAAqD,EAAArD,KAED,WAAA,EAAA,KAAA,CAAA,GAAI8K,EAAKzI,QAAQ8K,0BAGb,YAFFrC,EAAKzI,QAAQ8K,0BACXhH,EAAYuG,kBAMhB5B,EAAKX,QAAO,yBACehE,EAAYuG,iBAAiBC,UAAS,4BAC/D,CACEO,eAAgB/G,EAAYuG,iBAAiBC,YAGjD7B,EAAKL,WAAWxB,YAAY,CAC1B1I,KAAM,qBACNyM,aAAc7G,EAAYuG,iBAAiBM,aAC3CH,OAAiC1G,yBAAAA,EAAYuG,iBAAiBC,UAAoC,4BAClGM,UAAU,GACT,EA5DkB,IAkEzB,IAAK,QAQH,OAPInC,EAAKC,wBAA0B5E,EAAYiH,YAAYpB,WACzDlB,EAAKzI,QAAQ+H,QAAQjE,EAAYiH,YAAYC,eAC7CvC,EAAKwC,oBAAoBnH,EAAYiH,YAAYC,eACjDvC,EAAKO,eAAiBlF,EAAYiH,YAAYpB,SAC9ClB,EAAKgB,wBACLhB,EAAKe,WAAW,aAElBhM,QAAAC,UAGF,IAAK,OAOH,OANAgL,EAAKL,WAAWxB,YAAY,CAC1B1I,KAAM,OACNyL,SAAU7F,EAAYoH,WAAWvB,WAInCnM,QAAAC,UAIF,QAEE,OADAgL,EAAKzI,QAAQ6H,QAAQ/D,GACrBtG,QAAAC,UAGN,CAAC,MAAAe,GAAA,OAAAhB,QAAAiB,OAAAD,EAEO2M,CAAAA,EAAAA,KAAAA,sBAAwB,SAACtI,GAC/B,IT7VgCuI,EAC5BzO,ESkWgB,cAAhBwG,EAAKyF,QACPzF,EAAKiF,WAAWxB,YAAY,CAC1ByE,kBTrW4BD,ES6VRvI,EAAMoB,KAAK,GAQuBtH,OTpWtDA,EAAS,IAAIH,WAAW4O,GAEXjP,OAAOoB,KAAKmN,OAAOY,aAAYC,MAAnBb,OAAuB/N,MSuWtD,EAEQ6O,KAAAA,uBAAyB,SAAAjM,GAAiC,IAA9B0E,EAAI1E,EAAJ0E,KAChB,YAAdA,EAAK/F,MACPiF,EAAKqG,WAAWvF,EAAKwH,SAAW,YAAc,WAElD,EAACpM,KAEO4L,oBAAsB,SAACS,GAC7BvI,EAAKmF,OAAO7F,KAAKA,KAAKkJ,MAAQxI,EAAK4F,OACnC5F,EAAKmF,OAAOrL,QAAQoD,KAAKC,YAAY,CAAEpC,KAAM,qBAC7CiF,EAAKmF,OAAOrL,QAAQoD,KAAKC,YAAY,CACnCpC,KAAM,SACNvB,OAAQX,EAAoB0P,IAEhC,EAEQ9B,KAAAA,aAAe,WAErBzG,EAAKqG,WAAW,aAChBrG,EAAKmF,OAAOrL,QAAQoD,KAAKC,YAAY,CAAEpC,KAAM,cAC7CiF,EAAKmF,OAAO7F,KAAKA,KAAKmJ,6BACpB,KACAzI,EAAKmF,OAAOpJ,QAAQ2M,YAAc,GAIpCpI,WAAW,WACTN,EAAKmF,OAAO7F,KAAKA,KAAKkJ,MAAQxI,EAAK4F,OACnC5F,EAAKmF,OAAOrL,QAAQoD,KAAKC,YAAY,CAAEpC,KAAM,oBAC/C,EAAG,IACL,OAEQ4J,QAAU,SAAClE,EAAiB1E,GAClCkH,QAAQzE,MAAMiC,EAAS1E,GACvBiE,EAAKnD,QAAQ8H,QAAQlE,EAAS1E,EAChC,OAEQ4M,gBAAkB,SAACC,GACzB,GAA6B,IAAzBA,EAAczP,OAChB,OAAO,EAMT,IADA,IAAIyM,EAAS,EACJtM,EAAI,EAAGA,EAAIsP,EAAczP,OAAQG,IACxCsM,GAAUgD,EAActP,GAAK,IAI/B,OAFAsM,GAAUgD,EAAczP,QAER,EAAI,EAAIyM,EAAS,EAAI,EAAIA,CAC3C,EAAC1J,KAEM2M,MAAQ,WAAM,OAAA7I,EAAKiF,WAAWpF,cAAc,OAE5CiJ,OAAS,WAAM,MAAgB,cAAhB9I,EAAKyF,MAAsB,EAE1CsD,KAAAA,UAAY,SAAAC,GACjBhJ,EAAK4F,OADqBoD,EAANpD,MAEtB,EAEOqD,KAAAA,YAAc,SAAC9J,GACpBa,EAAKkF,MAAMhG,SAASC,EACtB,EAACjD,KAEMgN,0BAA4B,WAKjC,OAJuBC,MAAvBnJ,EAAK0F,qBAAL1F,EAAK0F,mBAAuB,IAAIrM,WAC9B2G,EAAKkF,MAAMlJ,SAASoN,oBAEtBpJ,EAAKkF,MAAMlJ,SAASqN,qBAAqBrJ,EAAK0F,oBACvC1F,EAAK0F,kBACd,EAEO4D,KAAAA,2BAA6B,WAKlC,OAJwB,MAAxBtJ,EAAK2F,sBAAL3F,EAAK2F,oBAAwB,IAAItM,WAC/B2G,EAAKmF,OAAOnJ,SAASoN,oBAEvBpJ,EAAKmF,OAAOnJ,SAASqN,qBAAqBrJ,EAAK2F,qBACxC3F,EAAK2F,mBACd,OAEO4D,eAAiB,WACtB,OAAOvJ,EAAK2I,gBAAgB3I,EAAKkJ,4BACnC,EAAChN,KAEMsN,gBAAkB,WACvB,OAAOxJ,EAAK2I,gBAAgB3I,EAAKsJ,6BACnC,EAACpN,KAEMuN,aAAe,SAACC,GAChB1J,EAAK+F,iBASV/F,EAAKiF,WAAWxB,YAAY,CAC1B1I,KAAM,WACN4O,MAAOD,EAAO,OAAS,UACvBlD,SAAUxG,EAAK6F,iBAEjB7F,EAAK8F,oBAAsB9F,EAAK6F,eAChC7F,EAAKsG,yBAdHrD,QAAQC,KACuB,IAA7BlD,EAAK8F,oBACD,8DACA,iFAYV,EAEO8D,KAAAA,qBAAuB,SAACC,GAC7B7J,EAAKiF,WAAWxB,YAAY,CAC1B1I,KAAM,oBACN8O,KAAAA,GAEJ,EAEOC,KAAAA,gBAAkB,SAACD,GACxB7J,EAAKiF,WAAWxB,YAAY,CAC1B1I,KAAM,eACN8O,KAAAA,GAEJ,EAEOE,KAAAA,iBAAmB,WACxB/J,EAAKiF,WAAWxB,YAAY,CAC1B1I,KAAM,iBAEV,EAzUmBmB,KAAOW,QAAPA,EACAX,KAAU+I,WAAVA,EACD/I,KAAKgJ,MAALA,EACAhJ,KAAMiJ,OAANA,EACTjJ,KAAQkJ,SAARA,EAEPlJ,KAAKW,QAAQ4H,UAAU,CAAE5E,eAAgBoF,EAAWpF,iBAEpD3D,KAAK+I,WAAWrB,aAAa1H,KAAK+J,uBAClC/J,KAAK+I,WAAWvB,UAAUxH,KAAKwH,WAE/BxH,KAAKgJ,MAAMpL,QAAQoD,KAAK8M,UAAY9N,KAAK8L,sBACzC9L,KAAKiJ,OAAOrL,QAAQoD,KAAK8M,UAAY9N,KAAKmM,uBAC1CnM,KAAKgK,aAAa,YACpB,CA3BClB,OA2BAA,EAxGmBiF,aAAA,SAClBpN,GAGsB,IAAA,IAAAqN,EAAA,WAAA,OAAAhQ,EAyBlB,WAAA,OAAAG,QAAAC,QAG6BoB,UAAUgB,aAAaC,aAAa,CACjEC,OAAO,KACPpC,KAAA,SAAAsC,GAAA,IAAAqN,EAAAC,SAAAA,IAAA/P,OAAAA,QAAAC,QAkBiBqF,EAAWxD,OAAOU,IAAQrC,KAAA,SAAA6P,GAAC,OAA9CpF,EAAUoF,EAAoChQ,QAAAC,QACtBD,QAAQiQ,IAAI,CAClCxO,EAAMK,OAAMoO,EAAA,CAAA,EACPtF,EAAWnF,YACdvD,CAAAA,8BAA+BM,EAAQN,iCAEzC8C,EAAOlD,OAAO8I,EAAWlF,iBACzBvF,cAAAgQ,GAAA,IAAAC,EAKF,OAXCvF,EAAKsF,EAAErF,GAAAA,EAAMqF,EAAA,GAQQ,OAAtBC,EAAAC,IAAAD,EAAwB9L,YAAYC,QAAQ,SAAAC,GAAK,OAAIA,EAAMC,MAAM,GACjE4L,EAAyB,KAEd,IAAA1F,EAAa2F,EAAa1F,EAAYC,EAAOC,EAAQC,EAAU,EAAA,EAAA,CAhC1EsF,EAAsB5N,EAItB,IAMuB8N,EANjBC,EAAqC,OAA1BV,EAAGtN,EAAQiO,iBAAeX,EAAI,CAC7CY,QAAS,EAETC,QAAS,KAEPC,EAAQJ,UACZ,GNhGG,WAAWK,KAAKxP,UAAUE,WMiG3BqP,EAA2BL,OAAtBA,EAAGC,EAAYG,SAAOJ,EAAIK,OAC1B,GAAIzP,IAAe,CAAA,IAAA2P,EACxBF,EAAuB,OAAlBE,EAAGN,EAAYO,KAAGD,EAAIF,CAC7B,CAAC,IAAAI,EAEGJ,WAAAA,GAAAA,EAAQ,SAAC5Q,QAAAC,QACL,IAAID,QAAQ,SAAAC,GAAO,OAAIgG,WAAWhG,EAAS2Q,EAAM,IAACzQ,KAAA6Q,WAAAA,EAAAA,CADtDJ,GACsDI,OAAAA,GAAAA,EAAA7Q,KAAA6Q,EAAA7Q,KAAA4P,GAAAA,GAAA,EAgB5D,EAAS5L,SAAAA,GAAO,IAAA8M,EAAAC,EAAAC,EAGM,OAFpBb,EAAY7F,eAAe,CAAEW,OAAQ,iBACf,OAAtB6F,EAAAZ,IAAAY,EAAwB3M,YAAYC,QAAQ,SAAAC,GAAS,OAAAA,EAAMC,MAAM,GACvD,OAAVyM,EAAAtG,IAAAsG,EAAYxM,QAAQ1E,QAAAC,QACdkR,OADcA,EACdtG,QAAAsG,EAAAA,EAAOzM,SAAOvE,KAAAiR,WAAAA,IAAAA,EAAApR,OAAAA,QAAAC,QACR,OADQmR,EACdtG,QAAM,EAANsG,EAAQ1M,SAAOvE,yBAAAkR,IAKrB,MAAMlN,CAAM,CAAAmN,IAAAA,EAAAzR,aAJR0R,IAAAA,EAAAvR,OAAAA,QAAAC,QACIsR,OADJA,EACIxG,QAAAwG,EAAAA,EAAUxF,WAAS5L,KAAA,WACzB4K,EAAW,IAAK,EAClB,EAACuG,WAAAA,GAAAA,OAAAA,GAAAA,EAAAnR,KAAAmR,EAAAnR,KAAAkR,GAAAA,GAAA,EAAA,EAEH,EAAC,EAtEKf,EAAWJ,KACZjG,EACAE,EACA3H,GAGL8N,EAAY7F,eAAe,CAAEW,OAAQ,eACrCkF,EAAY5F,wBAAwB,CAAEgB,iBAAiB,IAEvD,IAAIb,EAAsB,KACtBD,EAAgC,KAChCE,EAAwB,KACxBuF,EAA6C,KAE7CtF,EAAoC,KAAKyG,EAAA,SAAAC,GAAAA,GACtB,OADsBA,EACzCjP,EAAQkP,cAAWD,EAAQtP,CAAAA,IAAAA,EAAAtC,aACzBG,OAAAA,QAAAC,QACeoB,UAAU0J,SAAS4G,QAAQ,WAASxR,KAAA,SAAAyR,GAArD7G,EAAQ6G,CAA8C,EACxD,mBAACzP,GAAAA,EAAAhC,KAAAgC,OAAAA,EAAAhC,oBAJ0C,UAI1CH,QAAAC,QAAAuR,GAAAA,EAAArR,KAAAqR,EAAArR,KAAA0P,GAAAA,IAqDL,CAAC,MAAA7O,UAAAhB,QAAAiB,OAAAD,EAAA2J,CAAAA,EAAAA,CAAA,CAYD,kCA8UAnF,EACA6J,EACAxI,GAEA,gBAFAA,IAAAA,EA5auB,6BA8ahBgL,MAAShL,EAAkCrB,4BAAAA,cAA2B,CAC3EsM,OAAQ,OACRC,KAAMxL,KAAKkC,UAAU,CACnBuJ,SAAU3C,EAAO,OAAS,YAE5B4C,QAAS,CACP,eAAgB,qBAGtB"}